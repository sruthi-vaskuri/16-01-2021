class Solution{
    long dfs(int i,int[] visit , int[] Values,ArrayList<ArrayList<Integer>> arr){
        long s=Values[i];
        visit[i]=1;
        for(int k=0;k<arr.get(i).size();k++){
            if(visit[arr.get(i).get(k)]==0)
               s+=dfs(arr.get(i).get(k),visit,Values,arr);
        }
        return s;
    }
    long solve(int V,int E,int[] Values,int[][] Edges){
        //code here
        ArrayList<ArrayList<Integer>> arr=new ArrayList<>();
        for(int i=0;i<V;i++){
            arr.add(new ArrayList<Integer>());
        }
        for(int i=0;i<E;i++){
            arr.get(Edges[i][0]-1).add(Edges[i][1]-1);
            arr.get(Edges[i][1]-1).add(Edges[i][0]-1);
        }
        long sum=0;
        long max=0;
        int visit[]=new int[V];
        for(int i=0;i<V;i++){
            if(visit[i]==0){
                sum=dfs(i,visit,Values,arr);
                if(max<sum)
                   max=sum;
            }
        }
        return max;
    }
}
