class Solution {
    public int ind(int i,int j,int col){
        return i*col+j;
    }
    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {
        Queue<Integer> q=new LinkedList<>();
        int col=image[0].length;
        q.add(ind(sr,sc,col));
        int k=image[sr][sc];
        ArrayList<Integer> list=new ArrayList<>();
        list.add(ind(sr,sc,col));
        while(!q.isEmpty()){
            int z=q.remove();
            int x=z/col;
            int y=z%col;
            image[x][y]=newColor;
            if(x-1>=0 && image[x-1][y]==k){
                image[x-1][y]=newColor;
                if(!list.contains(ind(x-1,y,col))){
                   q.add(ind(x-1,y,col));
                    list.add(ind(x-1,y,col));
                }
            }
            if(x+1<image.length && image[x+1][y]==k){
                image[x+1][y]=newColor;
            if(!list.contains(ind(x+1,y,col))){
                q.add(ind(x+1,y,col));
                list.add(ind(x+1,y,col));
            }
            }
            if(y-1>=0 && image[x][y-1]==k){
                image[x][y-1]=newColor;
                if(!list.contains(ind(x,y-1,col))){
                q.add(ind(x,y-1,col));
                list.add(ind(x,y-1,col));
                }
            }
            if(y+1<col && image[x][y+1]==k){
                image[x][y+1]=newColor;
                if(!list.contains(ind(x,y+1,col))){
                q.add(ind(x,y+1,col));
                    list.add(ind(x,y+1,col));
                }
            }
        }
        return image;
    }
}
