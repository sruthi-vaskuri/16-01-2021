class Solution
{
    public int ind(int i,int j,int col){
        return i*col+j;
    }
    public boolean is_Possible(int[][] grid)
    {
        // Code here
        Queue<Integer> q=new LinkedList<>();
        int row=grid.length;
        int col=grid[0].length;
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                if(grid[i][j]==1){
                    q.add(ind(i,j,col));
                }
            }
        }
        while(!q.isEmpty()){
            int z=q.remove();
            int x=z/col;
            int y=z%col;
            if((x-1>=0 && grid[x-1][y]==2) || ( x+1<row && grid[x+1][y]==2) || (y-1>=0 && grid[x][y-1]==2) || (y+1<col && grid[x][y+1]==2)){
                return true;
            }
            if(x-1>=0 && grid[x-1][y]==3){
                q.add(ind(x-1,y,col));
                grid[x-1][y]=0;
            }
            if(x+1<row && grid[x+1][y]==3){
                q.add(ind(x+1,y,col));
                grid[x+1][y]=0;
            }
            if(y-1>=0 && grid[x][y-1]==3){
                q.add(ind(x,y-1,col));
                grid[x][y-1]=0;
            }
            if(y+1<col && grid[x][y+1]==3){
                q.add(ind(x,y+1,col));
                grid[x][y+1]=0;
            }
        }
        return false;
    }
}
